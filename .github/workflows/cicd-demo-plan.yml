name: CICD Demo(terraform plan)

on:
  pull_request:
    branches:
      - main

env:
  AWS_ASSUME_ROLE: ${{ secrets.ASSUMEROLE_20240622 }}

permissions: write-all

jobs:
  terraform-plan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ap-northeast-1
        role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
        role-session-name: GitHubActions
        role-duration-seconds: 1200

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Plan
      id: plan
      working-directory: terraform
      run: terraform plan -no-color > plan.txt
      continue-on-error: true

    - name: 'Set output'
      id: set_output
      working-directory: terraform
      run: |
        if echo "$(cat plan.txt)" | grep -q "No changes."; then
          echo "No changes detected."
          echo "plan_status=no_changes" >> $GITHUB_ENV
        else
          echo "Changes detected."
          echo "plan_status=changes" >> $GITHUB_ENV
        fi

  comment:
    name: 'Comment Terraform Plan Output'
    runs-on: ubuntu-latest
    needs: terraform-plan

    steps:
      - name: 'Post Plan to PR'
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const planOutput = `## Terraform Plan Output\n\n\`\`\`terraform\n${{ env.plan_output }}\n\`\`\``;
            const { context, github } = require('@actions/github');
            const status = `Terraform Plan Status: ${{ env.plan_status }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `${status}\n\n${planOutput}`
            });
        env:
          PLAN_OUTPUT: ${{ env.plan_output }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
