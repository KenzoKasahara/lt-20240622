name: CICD Demo(terraform plan)

on:
  pull_request:
    branches:
      - main

env:
  AWS_ASSUME_ROLE: ${{ secrets.ASSUMEROLE_20240622 }}

permissions: write-all

jobs:
  terraform-plan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ap-northeast-1
        role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
        role-session-name: GitHubActions
        role-duration-seconds: 1200

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Plan
      id: plan
      working-directory: terraform
      run: |
        terraform plan -no-color >> plan.txt
        echo "plan_output=$(cat plan.txt)" >> $GITHUB_ENV
      continue-on-error: true

    - name: 'Set output'
      id: set_output
      working-directory: terraform
      run: |
        if echo "${{ env.plan_output }}" | grep -q "No changes."; then
          echo "No changes detected."
          echo "plan_status=no_changes"
        else
          echo "Changes detected."
          echo "plan_status=changes"
        fi
        echo "plan_status=$plan_status" >> $GITHUB_ENV

    - name: 'Post Plan to PR'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const planOutput = `## Terraform Plan Output\n\n\`\`\`terraform\n${{ env.plan_output }}\n\`\`\``;
          const status = `Terraform Plan Status: ${{ env.plan_status }}`;
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `${status}\n\n${planOutput}`
          });
